"use strict";const e=require("../common/vendor.js");exports.useBNBTransfer=function(){return e.ref(""),{sendBNB:async(t,s,r)=>{try{const n=new e.Web3(window.ethereum);if(!r)throw new Error("Amount is required");const o=await n.eth.getGasPrice();let i;const l=r.toString();if(l.includes(".")){const e=l.split("."),t=e[0];i=t+e[1].padEnd(18,"0").substring(0,18),i=i.replace(/^0+/,"")||"0"}else i=l+"0".repeat(18);const a={from:t,to:s,value:"0x"+BigInt(i).toString(16),gas:"0x5208",gasPrice:n.utils.toHex(o),chainId:"0x38"};return{success:!0,txHash:await window.ethereum.request({method:"eth_sendTransaction",params:[a]}),error:null,isLoading:!1}}catch(n){return console.error("Transfer failed:",n),{success:!1,txHash:null,error:n.message,isLoading:!1}}},debugAmountConversion:t=>{const s=t.toString();console.log("Original amount:",s);const r=(new e.Web3).utils.toWei(s,"ether");let n;if(console.log("web3.utils.toWei result:",r),s.includes(".")){const e=s.split(".");n=e[0]+e[1].padEnd(18,"0").substring(0,18),n=n.replace(/^0+/,"")||"0"}else n=s+"0".repeat(18);return console.log("Manual calculation result:",n),console.log("Results match:",r===n),{web3Result:r,manualResult:n}},error:e.ref(null),isLoading:e.ref(!1)}};
